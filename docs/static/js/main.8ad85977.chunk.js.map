{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaG,OACI,sBAAMC,SATO,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKX,SACK,uBAAOO,KAAK,OACZC,MAAOT,EACPU,SAhBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,uCCNfG,EAAM,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DACXC,EADW,0FAC4EC,UAAUH,GADtF,sBAEEI,MAAOF,GAFT,cAEXG,EAFW,gBAGIA,EAAKC,OAHT,uBAGVC,EAHU,EAGVA,KACDC,EAAMD,EAAKE,KAAK,SAAAC,GAAM,IAAD,EACvB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARzB,kBAYVM,GAZU,4CAAF,sDCENO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHDO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAQpB,ECRuB,SAAEA,GAG1B,MAA0Bd,mBAAS,CAE/BqB,KAAK,GACLa,SAAQ,IAHZ,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAbCC,qBAAU,WACNxB,EAAOC,GACNwB,MAAM,SAAAC,GAEJH,EAAS,CACLf,KAAMkB,EACNL,SAAQ,SAIhB,CAACpB,IAGEqB,EDdyBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAGrB,OACG,qCACE,qBAAIJ,UAAU,oCAAd,cAAsDhB,KAC/CoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACd,qBAAKA,UAAU,YAAf,SAEOH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAA+BA,GAAbA,EAAIC,aElBjCgB,EAAe,WACzB,MAAoCzC,mBAAS,CAAC,aAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEC,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAM,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCXtC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.8ad85977.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n const [inputValue, setInputValue] = useState('')\r\n const handleInputChange = (e)=>{\r\n     setInputValue(e.target.value);\r\n\r\n }\r\n const handelSubmit =(e)=>{\r\n    e.preventDefault();\r\n    if( inputValue.trim().length>2 ){\r\n     setCategories(cats=> [ inputValue, ...cats]);\r\n     setInputValue('');\r\n    }\r\n\r\n }\r\n    return (\r\n        <form onSubmit={ handelSubmit }>\r\n             <input type=\"text\"\r\n             value={inputValue}\r\n             onChange={ handleInputChange}\r\n             />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes ={\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGif= async( category )=>{\r\n    const url=`https://api.giphy.com/v1/gifs/search?api_key=LXqBNAQHqGTnKKVxoMGDK1cajqVkOVjn&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json()\r\n    const gifs =data.map( img=>{ \r\n        return {\r\n            id:img.id,\r\n            title: img.title,                \r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n}\r\n ","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n   // console.log({id, title, url});\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n          <img src={url} alt={title} />\r\n          <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem }   from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n/* \r\n     useEffect( () => {\r\n        getGif(category)\r\n        .then(setImages);\r\n     }, [category]); */\r\n  ///data:images es para darle un nuevo nombre a data\r\n     const {data:images, loading} = useFetchGifs(category);\r\n    \r\n\r\n    return (\r\n       <>\r\n         <h3 className=\"animate__animated animate__fadeIn\" > { category }</h3>\r\n              { loading && <p className=\"animate__animated animate__flash\" >loading</p> }\r\n             <div className=\"card-grid\">  \r\n                {\r\n                    images.map( img=>(\r\n                        <GifGridItem key={img.id} { ...img}/>\r\n                    ))\r\n                }     \r\n           </div>\r\n        </>\r\n    )\r\n}\r\n","import { set } from 'mongoose';\r\nimport { useState,useEffect } from 'react'\r\nimport {getGif} from '../helpers/getGif'\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n    \r\n\r\n    const [state, setstate] = useState({\r\n \r\n        data:[],\r\n        loading:true,\r\n    });\r\n   \r\n     useEffect(() => {\r\n         getGif(category)\r\n         .then( imgs =>{ \r\n         \r\n            setstate({\r\n                data: imgs,\r\n                loading:false\r\n            });\r\n         })\r\n\r\n     }, [category])\r\n\r\n\r\n    return state;\r\n\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n   const [categories, setCategories] = useState(['One Puch']);\r\n\r\n    return (\r\n        <div>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map ( category =>(\r\n                        <GifGrid key={category} category={category} />\r\n                     ) )\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}